@page "/user/{UserId}"
@using Rika_Backoffice_Webapp.Models
@using Rika_Backoffice_Webapp.Services
@using Blazorise
@using Blazorise.Bootstrap

@rendermode InteractiveServer
@inject NavigationManager navigationManager
@inject UserService _userService
@inject NotificationService NotificationService


<ConfirmPopup @ref="confirmPopup" OnConfirm="DeleteUser" />


<div class="container mt-5">
    <h2 class="mb-4">User Profile</h2>
    <div class="card p-4">
        <AlertPopup Message="@alertMessage" />
        <div class="form-group row">
            <label class="col-sm-3 col-form-label ">First Name:</label>
            <div class="col-sm-9">
                <p class="form-control-plaintext">@user.FirstName</p>
            </div>
        </div>
        <div class="form-group row">
            <label class="col-sm-3 col-form-label">Last Name:</label>
            <div class="col-sm-9">
                <p class="form-control-plaintext">@user.LastName</p>
            </div>
        </div>
        <div class="form-group row">
            <label class="col-sm-3 col-form-label">Email Address:</label>
            <div class="col-sm-9">
                <input type="email" class="form-control" @bind="user.Email" />
            </div>
        </div>
        <div class="form-group row">
            <label class="col-sm-3 col-form-label">User ID:</label>
            <div class="col-sm-9">
                <p class="form-control-plaintext">@user.Id</p>
            </div>
        </div>
        <div class="text-right mt-3">
            <button class="btn btn-primary" @onclick="UpdateEmail">Save Changes</button>
            <Button Color="Color.Danger" @onclick="() => confirmPopup.ShowModal()">Delete User</Button>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public string? UserId { get; set; }
    private UserModel user = new UserModel();

    private ConfirmPopup confirmPopup;

    public string? alertMessage;
    protected override async Task OnInitializedAsync()
    {
        
        if(UserId != null)
        {
            user = await _userService.GetOneUserAsync(UserId);
        }

    }

    private async Task UpdateEmail()
    {
        if (UserId != null)
        {
            await _userService.UpdateUserAsync(UserId, user);
            NotificationService.Message = "User was successfully updated";
            navigationManager.NavigateTo("/usermanagement" );
        }
        else{
            alertMessage = "User not found";
        }
    }

    private async Task DeleteUser()
    {
        
        if(UserId != null)
        {
            await _userService.DeleteUserAsync(UserId);
            NotificationService.Message = "User was successfully Deleted";
            navigationManager.NavigateTo("/usermanagement");
        }
        else
        {
            alertMessage = "User not found";
        }
    }
}
