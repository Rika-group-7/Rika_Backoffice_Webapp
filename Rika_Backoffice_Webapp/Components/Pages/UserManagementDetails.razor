@page "/customers/{UserId}"
@using Rika_Backoffice_Webapp.Models
@using Rika_Backoffice_Webapp.Services
@using Blazorise
@using Blazorise.Bootstrap
@using Blazorise.DataGrid

@rendermode InteractiveServer
@inject UserService _userService
@inject OrderService _orderService
@inject NotificationService _notificationService


<PageTitle>Customer Details</PageTitle>

<ConfirmPopup @ref="confirmPopup" OnDelete="DeleteUser" OnUpdate="UpdateEmail" />

<h3>Customer Details</h3>

<div class="mt-5">
    <h2 class="mb-4">User Profile</h2>
    <div class="card p-4">
        <AlertPopup Message="@alertMessage" />
        <div class="form-group row">
            <label class="col-sm-3 col-form-label ">First Name:</label>
            <div class="col-sm-9">
                <p class="form-control-plaintext">@user.FirstName</p>
            </div>
        </div>
        <div class="form-group row">
            <label class="col-sm-3 col-form-label">Last Name:</label>
            <div class="col-sm-9">
                <p class="form-control-plaintext">@user.LastName</p>
            </div>
        </div>
        <div class="form-group row">
            <label class="col-sm-3 col-form-label">Email Address:</label>
            <div class="col-sm-9">
                <input type="email" class="form-control" @bind="user.Email" />
            </div>
        </div>
        <div class="form-group row">
            <label class="col-sm-3 col-form-label">User ID:</label>
            <div class="col-sm-9">
                <p class="form-control-plaintext">@user.Id</p>
            </div>
        </div>
        <div class="text-right mt-3">
            <Button Color="Color.Primary" @onclick="() => ShowUpdateConfirm()">Save Changes</Button>
            <Button Color="Color.Danger" @onclick="() => ShowDeleteConfirm()">Delete User</Button>
        </div>
    </div>
    <div class="accordion accordion-flush pt-2">

        @foreach (var order in orders)
        {
            <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed row" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapse-@order.OrderNumber" aria-expanded="false" aria-controls="flush-collapseOne">
                        <div class="col"><strong>Order Number: </strong>@order.OrderNumber.ToString()</div>
                        <div class="col"><strong>Order Date: </strong>@order.OrderDate</div>
                </button>
            </h2>
            @foreach (var item in order.OrderItems)
            {
                <div id="flush-collapse-@order.OrderNumber" class="accordion-collapse collapse" data-bs-parent="#accordionFlushExample">
                    <div class="accordion-body">
                        @item.ProductId
                        @item.ProductName
                        @item.Price
                    </div>
                </div>
            }
            </div>
        }

        </div>
    </div>



@code {
    [Parameter]
    public string? UserId { get; set; }
    private List<OrderModel> orders = new List<OrderModel>();
    private List<OrderItemDto> orderItem = new List<OrderItemDto>();
    private UserModel user = new UserModel();
    private OrderModel order = new OrderModel();
    private ConfirmPopup? confirmPopup;
    public string? alertMessage;
    protected override async Task OnInitializedAsync()
    {

        if(UserId != null)
        {
            user = await _userService.GetOneUserAsync(UserId);
            orders = await _orderService.GetOrderByUserId(user.Id);
           

        }
    }

    private async Task UpdateEmail()
    {
        if (UserId != null)
        {
            await _userService.UpdateUserAsync(UserId, user);
            _notificationService.Message = "User was successfully updated";
            _navigationManager.NavigateTo("/usermanagement" );
        }
        else{
            alertMessage = "User not found";
        }
    }

    private async Task DeleteUser()
    {

        if(UserId != null)
        {
            await _userService.DeleteUserAsync(UserId);
            _notificationService.Message = "User was successfully Deleted";
            _navigationManager.NavigateTo("/usermanagement");
        }
        else
        {
            alertMessage = "User not found";
        }
    }
    private async Task ShowUpdateConfirm()
    {
        if(confirmPopup != null)
        {
            await confirmPopup.ShowModal(false, $"Update: {user.Email}", "Are you sure you want to update user?", "Save");
        }
    }
    private async Task ShowDeleteConfirm()
    {
        if (confirmPopup != null)
        {
            await confirmPopup.ShowModal(true, $"Delete: {user.Email}", "Are you sure you want to DELETE user?", "Delete");
        }
    }
}
