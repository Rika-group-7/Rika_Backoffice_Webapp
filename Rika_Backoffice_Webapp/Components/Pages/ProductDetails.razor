@page "/products/{ProductId}"
@using Rika_Backoffice_Webapp.Models
@inject Rika_Backoffice_Webapp.Services.ProductService _productService


<div class="container-fluid">
    <div class="row mt-2">
        <div class="product-image col-4">
            <img src="@product.ProductImage" alt="Product Image" />
        </div>
        <div class="product-body col-6 ms-4">
            <h4>@product.Title</h4>
            <p>@product.Description</p>
            <p>Price: @product.Price €</p>
            <div>
                <p>
                    Categories:
                    @if (product.Categories != null)
                    {
                        @foreach (var category in product.Categories.Select((value, index) => (value, index)))
                        {
                            var value = category.value;
                            var index = category.index;


                            @if (index < product.Categories.Count - 1)
                            {
                                @(value.CategoryName + ", ")
                            }
                            else
                            {
                                @value.CategoryName
                            }
                        }
                    }
                </p>

            </div>
            <div>
                <p>
                    Materials:
                    @if (product.Materials != null)
                    {
                        @foreach (var category in product.Materials.Select((value, index) => (value, index)))
                        {
                            var value = category.value;
                            var index = category.index;


                            @if (index < product.Materials.Count - 1)
                            {
                                @(value.MaterialName + ", ")
                            }
                            else
                            {
                                @value.MaterialName
                            }
                        }
                    }
                </p>
            </div>
            <p>Brand: @product.Brand</p>
            <p>Size: @product.Size</p>
            <p>Color: @product.Color</p>
            <p>Article no: @product.SKU</p>
            <p>Rating avg: @product.Ratings</p>
            @if (product.StockStatus == true)
            {
                <p>In Stock: Yes</p>
            }
            else
            {
                <p>In Stock: No</p>
            }

        </div>
    </div>
    <a href="/products" class="btn btn-secondary">Back to Products</a>
    <a href=@($"/products/update/{ProductId}") class="btn btn-primary">Update Product</a>
</div>






@code {
    [Parameter]
    public string? ProductId { get; set; }
    private Product product = new Product();

    protected override async Task OnInitializedAsync()
    {
        if (ProductId != null)
        {
            var response = await _productService.GetProductByIdAsync(ProductId);
            product = response.Data.ProductReceived!;
        }

    }
}
