@page "/products/{ProductId}"
@using Rika_Backoffice_Webapp.Models
@inject Rika_Backoffice_Webapp.Services.ProductService _productService


<div class="container">
    <div class="product-image">
        <img src="@product.ProductImage" alt="Product Image" />
    </div>
    <div class="product-body">
        <h4>@product.Title</h4>
        <p>@product.Description</p>
        <p>Price: @product.Price</p>
        @if (product.Categories != null)
        {
            @foreach (var category in product.Categories.Select((value, index) => (value, index)))
            {
                var value = category.value;
                var index = category.index;
                

                @if (index < product.Categories.Count - 1)
                {
                    @(value.CategoryName + ", ")
                }
                else
                {
                    @value.CategoryName
                }
            }
        }
        <p>Brand: @product.Brand</p>
        <p>Size: @product.Size</p>
        <p>Color: @product.Color</p>
        <p>@product.SKU</p>
        <p>@product.Ratings</p>
        <p>In Stock? @product.StockStatus</p>
        
    </div>
</div>

<a href="/products" class="btn btn-primary">Back to Products</a>



@code {
    [Parameter]
    public string? ProductId { get; set; }
    private Product product = new Product();

    protected override async Task OnInitializedAsync()
    {
        if (ProductId != null)
        {
            var response = await _productService.GetProductByIdAsync(ProductId);
            product = response.Data.ProductReceived!;
        }

    }
}
