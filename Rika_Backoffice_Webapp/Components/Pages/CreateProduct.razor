@page "/products/create"
@rendermode InteractiveServer
@using Rika_Backoffice_Webapp.Models
@using Rika_Backoffice_Webapp.Services
@using System.Diagnostics

@inject ProductService _productService
@* @inject NotificationService _notificationService *@

@* <AlertPopup Message="@alertMessage" /> *@


<div class="container d-flex justify-content-center align-items-center">
    <div class="col-6 col-md-6 col-lg-8">
        <EditForm Model="ProductCreateInput" method="post" OnValidSubmit="SubmitCreateProduct" FormName="CreateProductForm">

            <h3 class="ms-1 mb-3 mt-3">Create Product</h3>

            <div class="form-floating mb-3">
                <InputText @bind-Value="ProductCreateInput.Title" class="form-control" placeholder="Product title" />
                <label class="form-label">Title</label>
                <ValidationMessage For="() => ProductCreateInput.Title" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="ProductCreateInput.Brand" class="form-control" placeholder="Product brand" />
                <label class="form-label">Brand</label>
                <ValidationMessage For="() => ProductCreateInput.Brand" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="ProductCreateInput.Size" class="form-control" placeholder="Product size" />
                <label class="form-label">Size</label>
                <ValidationMessage For="() => ProductCreateInput.Size" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="ProductCreateInput.Color" class="form-control" placeholder="Product color" />
                <label class="form-label">Color</label>
                <ValidationMessage For="() => ProductCreateInput.Color" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputNumber @bind-Value="ProductCreateInput.Price" class="form-control" placeholder="Product price" />
                <label class="form-label">Price</label>
                <ValidationMessage For="() => ProductCreateInput.Price" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="ProductCreateInput.Description" class="form-control" placeholder="Product description" />
                <label class="form-label">Description</label>
                <ValidationMessage For="() => ProductCreateInput.Description" class="text-danger" />
            </div>
            <div class="form-check mb-3">
                <InputCheckbox @bind-Value="ProductCreateInput.StockStatus" class="form-check-input" />
                <label class="form-check-label">In stock</label>
                <ValidationMessage For="() => ProductCreateInput.StockStatus" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="ProductCreateInput.SKU" class="form-control" placeholder="Product SKU" />
                <label class="form-label">SKU</label>
                <ValidationMessage For="() => ProductCreateInput.SKU" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputNumber @bind-Value="ProductCreateInput.Ratings" class="form-control" placeholder="Product rating" />
                <label class="form-label">Product rating</label>
                <ValidationMessage For="() => ProductCreateInput.Ratings" class="text-danger" />
            </div>
            <div class="form-floating">
                <InputText @bind-Value="ProductCreateInput.ProductImage" class="form-control" placeholder="Product image" />
                <label class="form-label">Image</label>
                <ValidationMessage For="() => ProductCreateInput.ProductImage" class="text-danger" />
            </div>

            <hr class="my-4"/>

            @if (ProductCreateInput.Categories != null)
            {
                @foreach (var category in ProductCreateInput.Categories)
                {
                    <div class="input-group">
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="category.CategoryName" class="form-control" placeholder="Product category" />
                            <label class="form-label">Category</label>
                            <ValidationMessage For="() => category.CategoryName" class="text-danger" />
                        </div>
                        <button type="button" class="btn btn-danger mb-3" @onclick="() => RemoveCategory(category)">Remove Category</button>
                    </div>
                    
                }
            }
            <button type="button" class="btn btn-primary me-3" @onclick="AddCategory">Add Category</button>

            <hr class="my-4" />

            @if (ProductCreateInput.Materials != null)
            {
                @foreach (var material in ProductCreateInput.Materials)
                {
                    <div class="input-group">                       
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="material.MaterialName" class="form-control" placeholder="Product material" />
                            <label class="form-label">Material</label>
                            <ValidationMessage For="() => material.MaterialName" class="text-danger" />
                        </div>
                        <button type="button" class="btn btn-danger mb-3" @onclick="() => RemoveMaterial(material)">Remove Material</button>
                    </div>
                }
            }
            <button type="button" class="btn btn-primary mb-4" @onclick="AddMaterial">Add Material</button>

            <div class="create-submit-button">
                <button type="submit" class="w-100 btn btn-lg btn-primary">Submit</button>
            </div>

        </EditForm>
    </div>
    
</div>


@code {

    private string? alertMessage;

    private ProductCreateRequest ProductCreateInput = new ProductCreateRequest { 
        Categories = new List<ProductCreateRequest.CategoryCreateRequest>(), 
        Materials = new List<ProductCreateRequest.MaterialCreateRequest>() 
    };

    private void AddCategory()
    {
        ProductCreateInput.Categories?.Add(new ProductCreateRequest.CategoryCreateRequest());
    }

    public void AddMaterial()
    {
        ProductCreateInput.Materials?.Add(new ProductCreateRequest.MaterialCreateRequest());
    }

    private void RemoveCategory(ProductCreateRequest.CategoryCreateRequest category)
    {
        ProductCreateInput.Categories?.Remove(category);
        StateHasChanged();
    }

    private void RemoveMaterial(ProductCreateRequest.MaterialCreateRequest material)
    {
        ProductCreateInput.Materials?.Remove(material);
        StateHasChanged();
    }

    private async Task SubmitCreateProduct()
    {
        var response = await _productService.CreateProduct(ProductCreateInput);

        if (response != null)
        {
            _notificationService.Call("Product was successfully created", "Success");
            _navigationManager.NavigateTo("/products");
        }
    }
}
